[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "science-live"
version = "0.0.1"
description = "Semantic knowledge exploration for scientific research"
authors = [
    {name = "Science Live Team"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
keywords = ["science", "research", "semantics", "knowledge-graph", "FAIR"]

dependencies = [
    "aiohttp>=3.8.0",
    "pydantic>=1.10.0",
    "pyyaml>=6.0",
    "rdflib>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.990",
]
docs = [
    "sphinx>=8.0.0",
    "sphinx-book-theme",
    "myst-nb",
    "myst-parser",
    "sphinx-autodoc2",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinxcontrib-mermaid",
    "jupyter>=1.0.0",
    "matplotlib>=3.5.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
]
nlp = [
    "spacy>=3.4.0",
    "transformers>=4.20.0",
]
viz = [
    "networkx>=2.8.0",
    "plotly>=5.10.0",
]

[project.urls]
Homepage = "https://github.com/ScienceLiveHub/science-live-pipeline"
Documentation = "https://sciencelivehub.github.io/science-live-pipeline"
Repository = "https://github.com/ScienceLiveHub/science-live-pipeline"
Issues = "https://github.com/ScienceLiveHub/science-live-pipeline/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["science_live*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "build", "dist"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["science_live"]
omit = ["*/tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
